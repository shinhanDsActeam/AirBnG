<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.airbng.mappers.ReservationMapper">
    <insert id="insertReservation" parameterType="com.airbng.dto.reservation.ReservationInsertRequest">
        INSERT INTO Reservation(
            dropper_id, keeper_id, start_time, end_time, state
        )VALUES(
            #{dropperId}, #{keeperId}, #{startTime}, #{endTime}, 'PENDING'
        )
        <selectKey keyProperty="id" resultType="Long" order="AFTER" >
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <resultMap id="ReservationSearch" type="com.airbng.dto.reservation.ReservationSearchResponse">
        <result property="reservationId" column="reservation_id" />
        <result property="state" column="state" />
        <result property="keeperId" column="keeper_id" />
        <result property="dropperId" column="dropper_id" />
    </resultMap>

    <!-- 예약 목록 조회 -->
    <select id="findAllReservationById" resultMap="ReservationSearch">
        SELECT
        r.reservation_id,
        r.state,
        r.keeper_id,
        r.dropper_id
        FROM Reservation r
        <!-- 동적 JOIN -->
        <choose>
            <when test="role == 'KEEPER'">
                LEFT JOIN Member m ON r.keeper_id = m.member_id
            </when>
            <when test="role == 'DROPPER'">
                LEFT JOIN Member m ON r.dropper_id = m.member_id
            </when>
        </choose>
        <where>
            <choose>
                <when test="role == 'KEEPER'">
                    r.keeper_id = #{memberId}
                </when>
                <when test="role == 'DROPPER'">
                    r.dropper_id = #{memberId}
                </when>
            </choose>
            <if test="state != null and state != ''">
                AND r.state = #{state}
            </if>
            <if test="nextCursorId != null">
                AND r.reservation_id &lt; #{nextCursorId} <!-- &lt;는 부등호 '<'를 의미-->
            </if>
            <!--최신 보관소 보여주기 위해서 내림차순 + nextCursorId보다 작은 id를 출력 (nextCursorId는 높은 숫자부터 내려가야함)-->
        </where>
        GROUP BY r.reservation_id ORDER BY r.reservation_id desc LIMIT #{limit}
    </select>

    <!-- 예약 건수 조회 -->
    <select id="findReservationByMemberId">
        SELECT COUNT(*)
        FROM Reservation r
        <if test="role == 'KEEPER'">
            LEFT JOIN Member m ON r.keeper_id = m.member_id
        </if>
        <if test="role == 'DROPPER'">
            LEFT JOIN Member m ON r.dropper_id = m.member_id
        </if>
        WHERE m.member_id = #{memberId}
    </select>


    <update id="updateReservationState">
        UPDATE reservation
        SET state = #{state}
        WHERE reservation_id = #{reservationId}
    </update>


    <resultMap id="ReservationWithDropperMap" type="com.airbng.domain.Reservation">
        <result property="reservationId" column="reservation_id"/>
        <result property="state" column="state"/>
        <result property="startTime" column="start_time"/>
        <result property="endTime" column="end_time"/>

        <association property="dropper" javaType="com.airbng.domain.Member">
            <result property="memberId" column="dropper_id"/>
            <result property="email" column="dropper_email"/>
            <result property="name" column="dropper_name"/>
            <result property="phone" column="dropper_phone"/>
            <result property="nickname" column="dropper_nickname"/>
            <result property="password" column="dropper_password"/>
            <result property="status" column="dropper_status"/>
        </association>
    </resultMap>






//<!-- 예약 - 알림 -->
    <!-- 단건 조회 -->
    <select id="findById" parameterType="long" resultType="com.airbng.model.Reservation">
        SELECT reservation_id AS id,
        dropper_id,
        keeper_id,
        start_time,
        end_time,
        state,
        updated_at,
        created_at
        FROM reservation
        WHERE reservation_id = #{id}
    </select>

    <!-- end_time 24시간 지난 상태 CONFIRMED 예약 조회 -->
    <select id="findExpiredConfirmedReservations" parameterType="java.time.LocalDateTime" resultType="com.airbng.model.Reservation">
        SELECT reservation_id AS id,
        dropper_id,
        keeper_id,
        start_time,
        end_time,
        state,
        updated_at,
        created_at
        FROM reservation
        WHERE state = 'CONFIRMED'
        AND end_time &lt; #{deadline}
    </select>

    <!-- 30분 이내 end_time 도래 예정인 예약 (CONFIRMED) -->
    <select id="findConfirmedNearEndTime" parameterType="java.time.LocalDateTime" resultType="com.airbng.model.Reservation">
        SELECT reservation_id AS id,
        dropper_id,
        keeper_id,
        start_time,
        end_time,
        state,
        updated_at,
        created_at
        FROM reservation
        WHERE state = 'CONFIRMED'
        AND end_time BETWEEN #{_parameter} AND DATE_ADD(#{_parameter}, INTERVAL 30 MINUTE)
    </select>

    <!-- 5분 이내 CONFIRMED 상태로 바뀐 예약 -->
    <select id="findStateChangedToConfirmed" parameterType="java.time.LocalDateTime" resultType="com.airbng.model.Reservation">
        SELECT reservation_id AS id,
        dropper_id,
        keeper_id,
        start_time,
        end_time,
        state,
        updated_at,
        created_at
        FROM reservation
        WHERE state = 'CONFIRMED'
        AND updated_at &gt; #{_parameter}
    </select>

    <!-- 5분 이내 CANCELLED 상태로 바뀐 예약 -->
    <select id="findStateChangedToCancelled" parameterType="java.time.LocalDateTime" resultType="com.airbng.model.Reservation">
        SELECT reservation_id AS id,
        dropper_id,
        keeper_id,
        start_time,
        end_time,
        state,
        updated_at,
        created_at
        FROM reservation
        WHERE state = 'CANCELLED'
        AND updated_at &gt; #{_parameter}
    </select>

</mapper>